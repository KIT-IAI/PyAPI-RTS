
# This file was generated with ClassExtractor

from typing import Any
from math import sqrt, sin, cos, tan
from pyapi_rts.api.component import Component
from pyapi_rts.api.parameters.parameter import Parameter
from pyapi_rts.api.parameters.connection_point import ConnectionPoint
from pyapi_rts.shared import ParameterCondition, ParameterConditionOperator, OperatorChainOperator, ParameterBoundProperty, BoundingBox
from pyapi_rts.shared.stretchable import Stretchable
from pyapi_rts.shared.node_type import NodeType, NodeIO

from pyapi_rts.api.parameters.parameter_collection import ParameterCollection

FOREACH_TYPE:from {{TypePath}} import {{TypeParam}}

class {{TypeName}}(Component):
    DOCSTR:

    type = "{{name}}"

    def __init__(self) -> None:
        super().__init__()
        FOREACH_PARAM:self.{{name}} : {{TypeParam}} = {{TypeParam}}.from_str({{args}})
        FOREACH_COLL:self.{{name}} : {{TypeParam}} = {{TypeParam}}()
        self._name_parameter_key: str = {{name_param_key}}
        TAGS[is_connecting]:self._is_connecting = {{value}}
        TAGS[is_hierarchy_connecting]:self._is_hierarchy_connecting = {{value}}
        TAGS[is_label]:self._is_label = {{value}}
        RECT_INIT:

        self._parameters = {
            FOREACH_PARAM:"{{key}}": self.{{name}},
        }

        self._computations = {
            FOREACH_COMP:"{{name_esc}}": self.{{name_parameter}},
        }

        self._collections = [
            FOREACH_COLL:self.{{name}},
        ]

    def as_dict(self) -> dict[str, Parameter]:
        return {
            FOREACH_COMP:"{{name_esc}}": self.{{name_parameter}}(),
        } | {
            FOREACH_PARAM:"{{key}}":self.{{name}},
        } | \
            FOREACH_COLL:self.{{name}}.as_dict()|\
        {}

    FOREACH_COMP:{{method}}
    
    RECT_FUNC: