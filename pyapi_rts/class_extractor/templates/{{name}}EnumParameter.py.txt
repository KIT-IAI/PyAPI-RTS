# This file was generated with ClassExtractor

from pyapi_rts.api.parameters.enum_parameter import EnumParameter
from enum import Enum

class {{name}}Enum(Enum):
    FOREACH:{{option_sani}} = "{{option}}"

class {{name}}EnumParameter(EnumParameter[{{name}}Enum]):

    def __init__(self, value: {{name}}Enum) -> None:
        if not isinstance(value, {{name}}Enum):
            raise TypeError("value is not an {{name}}Enum")
        super().__init__(value)

    @EnumParameter.value.setter
    def value(self, value: {{name}}Enum) -> None:
        """
        Sets the value of the parameter.

        :param value: The value of the parameter
        :type value: {{name}}Enum
        """
        if not isinstance(value, {{name}}Enum):
            raise TypeError
        self._value = value

    @classmethod
    def _parse_str(cls, value: str, _: bool = False) -> {{name}}Enum:
        if not isinstance(value, str):
            raise TypeError
        if value.startswith("$"):
            raise ValueError("No draft variables allowed in enum parameters!")
        try:
            return {{name}}Enum(value)
        except ValueError:
            try:
                return list({{name}}Enum.__members__.values())[int(value)]
            except ValueError:
                lowercase_vals = [option.value.lower() for option in list({{name}}Enum)]
                return list({{name}}Enum)[lowercase_vals.index(value.lower())]
