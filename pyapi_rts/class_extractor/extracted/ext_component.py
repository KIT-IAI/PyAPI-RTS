# LGPL-3.0 License
# Copyright (c) 2023 KIT-IAI-ESA

from .ext_parameter import ExtParameter
from .ext_parameter_coll import ExtParameterColl
from .ext_rectangle import ExtRectangle
from ..utils import valid_file_name


class ExtComponent:
    """
    A representation of the component for conversion between other formats
    """

    def __init__(self) -> None:
        """
        Initializes the component
        """
        #: The type of the component
        self._type: str = ""
        #: The top-level parameters of the component
        self.parameters: list[ExtParameter] = []
        #: The parameter collections of the component
        self.collections: list[ExtParameterColl] = []
        #: Computations: (name, type, expression)
        self.computations: list[tuple[str, str, str]] = []
        #: The surrounding rectangle of the component, including conneciton points
        self.rectangle: ExtRectangle | None = None
        #: The parameter determining the name of the component
        self.name_parameter_key: str = None
        #: True if this component is a wire, bus or similar
        self.is_connecting: bool = False
        #: True if the component can connect component boxes without being one of its own
        self.is_hierarchy_connecting: bool = False
        #: True if the component is a label
        self.is_label: bool = False

    def write(self) -> list[str]:
        """
        Converts the component to a list of lines
        :return: list of lines
        :rtype: list[str]
        """
        lst = []
        lst.append("COMPONENT")
        lst.append(self._type)
        if self.rectangle is not None:
            lst.extend(self.rectangle.write_lines())
        for param in self.parameters:
            lst += param.write()
        for c in self.collections:
            lst += c.write()
        lst.append("END")
        return lst

    def read(self, _list: list[str]) -> None:
        """
        Loads the component from a list of lines

        :param _list: list of lines
        :type _list: list[str]
        """
        self._type = _list[1]
        rect_line = next(
            filter((lambda i: _list[i] == "RECT"), range(2, len(_list) - 1)), -1
        )
        end_line = (
            next(
                filter((lambda i: _list[i] == "END"), range(rect_line, len(_list) - 1)),
                len(_list) - 1,
            )
            if rect_line != -1
            else 2
        )
        splits = list(
            filter(
                (lambda i: _list[i] == "COLL"),
                range(end_line + 1 if rect_line != -1 else 2, len(_list) - 1),
            )
        ) + [len(_list) - 1]
        # Read rectangle
        if rect_line != -1:
            self.rectangle = ExtRectangle()
        # Read Parameters
        for param_line in _list[end_line : splits[0]]:
            self.parameters.append(ExtParameter.read([param_line]))
        # Read Collections
        for i in range(len(splits) - 1):
            c = ExtParameterColl.read(_list[splits[i] : splits[i + 1]])
            if not c.name in [x.name for x in self.collections]:
                self.collections.append(c)

        return

    @property
    def type_name(self):
        """
        The name of the component type

        :return: The name of the component type
        :rtype: str
        """
        rep = valid_file_name(self._type)
        if len(rep) == 0:
            return "Component"
        if rep.startswith("_"):
            rep = rep[1:]
        if rep[0].isdigit():
            rep = "d" + rep
        return rep # + "Component"

    @property
    def type(self):
        """
        The type of the component

        :return: The type of the component
        :rtype: str
        """
        return self._type

    def set_type(self, _type: str) -> None:
        """
        Sets the component type

        :param _type: The component type
        :type _type: str
        """
        self._type = _type

    def apply_tag_dict(self, tag_dict: list[str]) -> None:
        """
        Applies a list of tags to the relevant attributes

        :param tag_dict: A dictionary of lists of tags, generated by the ClassExtractor from the component_tags file
        :type tag_dict: list[str]
        """
        if not self._type in tag_dict.keys():
            return
        self.is_connecting = "connecting" in tag_dict[self._type]
        self.is_hierarchy_connecting = "hierarchy_connecting" in tag_dict[self._type]
        self.is_label = "label" in tag_dict[self._type]

    def __key_path(self, key: str) -> str:
        """
        Returns the module path for a given key

        :param key: The key
        :type key: str
        :return: The module path
        :rtype: str
        """
        for param in self.parameters:
            if param.key == key:
                return param.key
        for coll in self.collections:
            for param in coll.parameters:
                if param.key == key:
                    return coll.name + "." + param.key
        return ""
