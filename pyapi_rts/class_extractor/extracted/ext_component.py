# LGPL-3.0 License
# Copyright (c) 2023 KIT-IAI-ESA

from .ext_parameter import ExtParameter
from .ext_parameter_coll import ExtParameterColl
from .ext_rectangle import ExtRectangle
from ..utils import valid_file_name


class ExtComponent:
    """
    A representation of the component for conversion between other formats
    """

    def __init__(self) -> None:
        """
        Initializes the component
        """
        #: The type of the component
        self._type: str = ""
        #: The top-level parameters of the component
        self.parameters: list[ExtParameter] = []
        #: The parameter collections of the component
        self.collections: list[ExtParameterColl] = []
        #: Computations: (name, type, expression)
        self.computations: list[tuple[str, str, str]] = []
        #: The surrounding rectangle of the component, including conneciton points
        self.rectangle: ExtRectangle | None = None
        #: The parameter determining the name of the component
        self.name_parameter_key: str = None
        #: True if this component is a wire, bus or similar
        self.is_connecting: bool = False
        #: True if the component can connect component boxes without being one of its own
        self.is_hierarchy_connecting: bool = False
        #: True if the component is a label
        self.is_label: bool = False

    @property
    def type_name(self):
        """
        The name of the component type

        :return: The name of the component type
        :rtype: str
        """
        rep = valid_file_name(self._type)
        if len(rep) == 0:
            return "Component"
        if rep.startswith("_"):
            rep = rep[1:]
        if rep[0].isdigit():
            rep = "d" + rep
        return rep # + "Component"

    @property
    def type(self):
        """
        The type of the component

        :return: The type of the component
        :rtype: str
        """
        return self._type

    def set_type(self, _type: str) -> None:
        """
        Sets the component type

        :param _type: The component type
        :type _type: str
        """
        self._type = _type

    def apply_tag_dict(self, tag_dict: list[str]) -> None:
        """
        Applies a list of tags to the relevant attributes

        :param tag_dict: A dictionary of lists of tags, generated by the ClassExtractor from the component_tags file
        :type tag_dict: list[str]
        """
        if not self._type in tag_dict.keys():
            return
        self.is_connecting = "connecting" in tag_dict[self._type]
        self.is_hierarchy_connecting = "hierarchy_connecting" in tag_dict[self._type]
        self.is_label = "label" in tag_dict[self._type]
